{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ResourceService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3001/todos';\n  }\n  getTodos() {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.get(`${this.apiUrl}/todos`, {\n      headers\n    });\n  }\n  getTodo(id) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.get(`${this.apiUrl}/todos/${id}`, {\n      headers\n    });\n  }\n  createTodo(todo) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.post(`${this.apiUrl}/todos`, todo, {\n      headers\n    });\n  }\n  updateTodo(id, todo) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.put(`${this.apiUrl}/todos/${id}`, todo, {\n      headers\n    });\n  }\n  deleteTodo(id) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.delete(`${this.apiUrl}/todos/${id}`, {\n      headers\n    });\n  }\n}\nResourceService.ɵfac = function ResourceService_Factory(t) {\n  return new (t || ResourceService)(i0.ɵɵinject(i1.HttpClient));\n};\nResourceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ResourceService,\n  factory: ResourceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,6BAA6B;EAEN;EAExCC,QAAQ;IACN,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG,IAAIR,WAAW,EAAE,CAACS,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;IACzE,OAAO,IAAI,CAACF,IAAI,CAACO,GAAG,CAAC,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAE;MAAEH;IAAO,CAAE,CAAC;EAC3D;EAEAI,OAAO,CAACC,EAAU;IAChB,MAAMR,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG,IAAIR,WAAW,EAAE,CAACS,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;IACzE,OAAO,IAAI,CAACF,IAAI,CAACO,GAAG,CAAC,GAAG,IAAI,CAACC,MAAM,UAAUE,EAAE,EAAE,EAAE;MAAEL;IAAO,CAAE,CAAC;EACjE;EAEAM,UAAU,CAACC,IAAS;IAClB,MAAMV,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG,IAAIR,WAAW,EAAE,CAACS,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;IACzE,OAAO,IAAI,CAACF,IAAI,CAACa,IAAI,CAAC,GAAG,IAAI,CAACL,MAAM,QAAQ,EAAEI,IAAI,EAAE;MAAEP;IAAO,CAAE,CAAC;EAClE;EAEAS,UAAU,CAACJ,EAAU,EAAEE,IAAS;IAC9B,MAAMV,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG,IAAIR,WAAW,EAAE,CAACS,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;IACzE,OAAO,IAAI,CAACF,IAAI,CAACe,GAAG,CAAC,GAAG,IAAI,CAACP,MAAM,UAAUE,EAAE,EAAE,EAAEE,IAAI,EAAE;MAAEP;IAAO,CAAE,CAAC;EACvE;EAEAW,UAAU,CAACN,EAAU;IACnB,MAAMR,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG,IAAIR,WAAW,EAAE,CAACS,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;IACzE,OAAO,IAAI,CAACF,IAAI,CAACiB,MAAM,CAAC,GAAG,IAAI,CAACT,MAAM,UAAUE,EAAE,EAAE,EAAE;MAAEL;IAAO,CAAE,CAAC;EACpE;;AAjCWP,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAoB,SAAfpB,eAAe;EAAAqB,YAFd;AAAM","names":["HttpHeaders","ResourceService","constructor","http","getTodos","token","localStorage","getItem","headers","set","get","apiUrl","getTodo","id","createTodo","todo","post","updateTodo","put","deleteTodo","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\anita\\Desktop\\STUDIA\\APLIKACJE_WEBOWE\\ZALICZENIE-task-manager\\client\\src\\app\\services\\resource.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ResourceService {\n  private apiUrl = 'http://localhost:3001/todos'; \n\n  constructor(private http: HttpClient) { }\n\n  getTodos(): Observable<any> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.get(`${this.apiUrl}/todos`, { headers });\n  }\n\n  getTodo(id: string): Observable<any> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.get(`${this.apiUrl}/todos/${id}`, { headers });\n  }\n\n  createTodo(todo: any): Observable<any> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.post(`${this.apiUrl}/todos`, todo, { headers });\n  }\n\n  updateTodo(id: string, todo: any): Observable<any> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.put(`${this.apiUrl}/todos/${id}`, todo, { headers });\n  }\n\n  deleteTodo(id: string): Observable<any> {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.delete(`${this.apiUrl}/todos/${id}`, { headers });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}