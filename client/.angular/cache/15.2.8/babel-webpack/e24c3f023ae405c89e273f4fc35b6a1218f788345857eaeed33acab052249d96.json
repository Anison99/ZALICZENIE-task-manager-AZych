{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nfunction NavbarComponent_a_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 12);\n    i0.ɵɵtext(1, \"Login\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NavbarComponent_a_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 13);\n    i0.ɵɵtext(1, \"Register\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NavbarComponent_a_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 14);\n    i0.ɵɵlistener(\"click\", function NavbarComponent_a_14_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.handleLogoClick());\n    });\n    i0.ɵɵtext(1, \"Logout\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction NavbarComponent_a_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 15);\n    i0.ɵɵtext(1, \"Create new task\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    \"fa-bars\": a0,\n    \"fa-times\": a1\n  };\n};\nexport class NavbarComponent {\n  constructor(authService) {\n    this.authService = authService;\n    this.isNavbarOpen = false;\n  }\n  toggleNavbar() {\n    this.isNavbarOpen = !this.isNavbarOpen;\n  }\n  handleLogoClick() {\n    this.authService.logout();\n  }\n  isUserAuthenticated() {\n    return this.authService.userIsAuthenticated;\n  }\n}\nNavbarComponent.ɵfac = function NavbarComponent_Factory(t) {\n  return new (t || NavbarComponent)(i0.ɵɵdirectiveInject(i1.AuthService));\n};\nNavbarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NavbarComponent,\n  selectors: [[\"app-navbar\"]],\n  decls: 17,\n  vars: 12,\n  consts: [[1, \"navbar\", \"navbar-expand-lg\", \"navbar-light\", \"bg-light\", \"p-3\"], [1, \"container\"], [\"routerLink\", \"/\", 1, \"navbar-brand\"], [\"type\", \"button\", 1, \"navbar-toggler\", 3, \"click\"], [1, \"fas\", 3, \"ngClass\"], [\"id\", \"navbarNav\", 1, \"collapse\", \"navbar-collapse\", \"navbar-collapse-show\"], [1, \"navbar-nav\"], [1, \"nav-item\"], [\"class\", \"nav-link\", \"routerLink\", \"/login\", 4, \"ngIf\"], [\"class\", \"nav-link\", \"routerLink\", \"/register\", 4, \"ngIf\"], [\"class\", \"nav-link\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"nav-link\", \"routerLink\", \"/add-todo\", 4, \"ngIf\"], [\"routerLink\", \"/login\", 1, \"nav-link\"], [\"routerLink\", \"/register\", 1, \"nav-link\"], [1, \"nav-link\", 3, \"click\"], [\"routerLink\", \"/add-todo\", 1, \"nav-link\"]],\n  template: function NavbarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"nav\", 0)(1, \"div\", 1)(2, \"a\", 2);\n      i0.ɵɵtext(3, \"Task Manager\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function NavbarComponent_Template_button_click_4_listener() {\n        return ctx.toggleNavbar();\n      });\n      i0.ɵɵelementStart(5, \"span\");\n      i0.ɵɵelement(6, \"i\", 4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"div\", 5)(8, \"ul\", 6)(9, \"li\", 7);\n      i0.ɵɵtemplate(10, NavbarComponent_a_10_Template, 2, 0, \"a\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"li\", 7);\n      i0.ɵɵtemplate(12, NavbarComponent_a_12_Template, 2, 0, \"a\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"li\", 7);\n      i0.ɵɵtemplate(14, NavbarComponent_a_14_Template, 2, 0, \"a\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"li\", 7);\n      i0.ɵɵtemplate(16, NavbarComponent_a_16_Template, 2, 0, \"a\", 11);\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵclassProp(\"active\", ctx.isNavbarOpen);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(9, _c0, !ctx.isNavbarOpen, ctx.isNavbarOpen));\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"show\", ctx.isNavbarOpen);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isUserAuthenticated());\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isUserAuthenticated());\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.isUserAuthenticated());\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.isUserAuthenticated());\n    }\n  },\n  dependencies: [i2.NgClass, i2.NgIf, i3.RouterLink],\n  styles: [\".nav-link[_ngcontent-%COMP%] {\\n    cursor: pointer;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbmF2YmFyL25hdmJhci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksZUFBZTtBQUNuQiIsInNvdXJjZXNDb250ZW50IjpbIi5uYXYtbGluayB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":";;;;;;IAwBUA,6BACG;IAAAA,qBAAK;IAAAA,iBACP;;;;;IAGDA,6BAIG;IAAAA,wBAAQ;IAAAA,iBACV;;;;;;IAGDA,6BAIG;IADDA;MAAAA;MAAA;MAAA,OAASA,uCAAiB;IAAA,EAAC;IAC1BA,sBAAM;IAAAA,iBACR;;;;;IAGDA,6BAIG;IAAAA,+BAAe;IAAAA,iBACjB;;;;;;;;;AC1CX,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAF/B,iBAAY,GAAG,KAAK;EAE2B;EAE/CC,YAAY;IACV,IAAI,CAACC,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;EACxC;EAEAC,eAAe;IACb,IAAI,CAACH,WAAW,CAACI,MAAM,EAAE;EAC3B;EAEAC,mBAAmB;IACjB,OAAO,IAAI,CAACL,WAAW,CAACM,mBAAmB;EAC7C;;AAfWR,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;QAAfA,eAAe;EAAAS;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDR5Bd,8BAA+D;MAEpBA,4BAAY;MAAAA,iBAAI;MACvDA,iCAKC;MAFCA;QAAA,OAASe,kBAAc;MAAA,EAAC;MAGxBf,4BAAM;MACJA,uBAGK;MACPA,iBAAO;MAGTA,8BAIC;MAGKA,8DAEC;MACHA,iBAAK;MACLA,8BAAqB;MACnBA,8DAKC;MACHA,iBAAK;MACLA,8BAAqB;MACnBA,+DAKC;MACHA,iBAAK;MACLA,8BAAqB;MACnBA,+DAKC;MACHA,iBAAK;;;MA5CPA,eAA6B;MAA7BA,0CAA6B;MAKzBA,eAAkE;MAAlEA,yFAAkE;MAOtEA,eAA2B;MAA3BA,wCAA2B;MAKFA,eAA4B;MAA5BA,iDAA4B;MAO9CA,eAA4B;MAA5BA,iDAA4B;MAQ5BA,eAA2B;MAA3BA,gDAA2B;MAQ3BA,eAA2B;MAA3BA,gDAA2B","names":["i0","NavbarComponent","constructor","authService","toggleNavbar","isNavbarOpen","handleLogoClick","logout","isUserAuthenticated","userIsAuthenticated","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\anita\\Desktop\\STUDIA\\APLIKACJE_WEBOWE\\ZALICZENIE-task-manager\\client\\src\\app\\navbar\\navbar.component.html","C:\\Users\\anita\\Desktop\\STUDIA\\APLIKACJE_WEBOWE\\ZALICZENIE-task-manager\\client\\src\\app\\navbar\\navbar.component.ts"],"sourcesContent":["<nav class=\"navbar navbar-expand-lg navbar-light bg-light p-3\">\n  <div class=\"container\">\n    <a class=\"navbar-brand\" routerLink=\"/\">Task Manager</a>\n    <button\n      class=\"navbar-toggler\"\n      type=\"button\"\n      (click)=\"toggleNavbar()\"\n      [class.active]=\"isNavbarOpen\"\n    >\n      <span>\n        <i\n          class=\"fas\"\n          [ngClass]=\"{ 'fa-bars': !isNavbarOpen, 'fa-times': isNavbarOpen }\"\n        ></i>\n      </span>\n    </button>\n\n    <div\n      class=\"collapse navbar-collapse navbar-collapse-show\"\n      [class.show]=\"isNavbarOpen\"\n      id=\"navbarNav\"\n    >\n      <ul class=\"navbar-nav\">\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" *ngIf=\"!isUserAuthenticated()\" routerLink=\"/login\"\n            >Login</a\n          >\n        </li>\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link\"\n            *ngIf=\"!isUserAuthenticated()\"\n            routerLink=\"/register\"\n            >Register</a\n          >\n        </li>\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link\"\n            *ngIf=\"isUserAuthenticated()\"\n            (click)=\"handleLogoClick()\"\n            >Logout</a\n          >\n        </li>\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link\"\n            *ngIf=\"isUserAuthenticated()\"\n            routerLink=\"/add-todo\"\n            >Create new task</a\n          >\n        </li>\n      </ul>\n    </div>\n  </div>\n</nav>\n","import { Component } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent {\n  isNavbarOpen = false;\n\n  constructor(private authService: AuthService) {}\n\n  toggleNavbar(): void {\n    this.isNavbarOpen = !this.isNavbarOpen;\n  }\n\n  handleLogoClick(): void {\n    this.authService.logout();\n  }\n\n  isUserAuthenticated(): boolean {\n    return this.authService.userIsAuthenticated;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}