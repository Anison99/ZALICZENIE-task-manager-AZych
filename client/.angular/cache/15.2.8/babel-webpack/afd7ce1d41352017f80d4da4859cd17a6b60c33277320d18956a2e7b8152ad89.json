{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const isAuthenticated = this.authService.userIsAuthenticated;\n    if (isAuthenticated) {\n      return true;\n    } else {\n      return this.router.parseUrl('/login');\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});\nexport class AuthReverseGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const isAuthenticated = this.authService.userIsAuthenticated;\n    if (!isAuthenticated) {\n      return true;\n    } else {\n      return this.router.parseUrl('/home');\n    }\n  }\n}\nAuthReverseGuard.ɵfac = function AuthReverseGuard_Factory(t) {\n  return new (t || AuthReverseGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthReverseGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthReverseGuard,\n  factory: AuthReverseGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,MAAMC,eAAe,GAAG,IAAI,CAACL,WAAW,CAACM,mBAAmB;IAC5D,IAAID,eAAe,EAAE;MACnB,OAAO,IAAI;KACZ,MAAM;MACL,OAAO,IAAI,CAACJ,MAAM,CAACM,QAAQ,CAAC,QAAQ,CAAC;;EAEzC;;AAVWT,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAU,SAATV,SAAS;EAAAW,YAFR;AAAM;AAkBpB,OAAM,MAAOC,gBAAgB;EAC3BX,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,MAAMC,eAAe,GAAG,IAAI,CAACL,WAAW,CAACM,mBAAmB;IAC5D,IAAI,CAACD,eAAe,EAAE;MACpB,OAAO,IAAI;KACZ,MAAM;MACL,OAAO,IAAI,CAACJ,MAAM,CAACM,QAAQ,CAAC,OAAO,CAAC;;EAExC;;AAVWG,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAF,SAAhBE,gBAAgB;EAAAD,YAFf;AAAM","names":["AuthGuard","constructor","authService","router","canActivate","route","state","isAuthenticated","userIsAuthenticated","parseUrl","factory","providedIn","AuthReverseGuard"],"sourceRoot":"","sources":["C:\\Users\\anita\\Desktop\\STUDIA\\APLIKACJE_WEBOWE\\ZALICZENIE-task-manager\\client\\src\\app\\guards\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree {\n    const isAuthenticated = this.authService.userIsAuthenticated;\n    if (isAuthenticated) {\n      return true;\n    } else {\n      return this.router.parseUrl('/login');\n    }\n  }\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthReverseGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree {\n    const isAuthenticated = this.authService.userIsAuthenticated;\n    if (!isAuthenticated) {\n      return true;\n    } else {\n      return this.router.parseUrl('/home');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}