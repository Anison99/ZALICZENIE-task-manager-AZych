{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { setAuthTokenAndAuthState } from '../pipes/auth.pipe'; // Importujemy nasz pipe\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = 'http://localhost:3001/user';\n    this._userIsAuthenticated = false;\n    this.authChange = new Subject();\n    const token = localStorage.getItem('token');\n    if (token) {\n      this._userIsAuthenticated = true;\n    }\n  }\n  get userIsAuthenticated() {\n    return this._userIsAuthenticated;\n  }\n  set userIsAuthenticated(value) {\n    this._userIsAuthenticated = value;\n    this.authChange.next(value);\n  }\n  registerUser(user) {\n    return this.http.post(`${this.apiUrl}/register`, user).pipe(setAuthTokenAndAuthState(this), tap(response => {\n      localStorage.setItem('token', response.token);\n      this.userIsAuthenticated = true;\n    }));\n  }\n  loginUser(user) {\n    return this.http.post(`${this.apiUrl}/login`, user).pipe(setAuthTokenAndAuthState(this), tap(response => {\n      localStorage.setItem('token', response.token);\n      this.userIsAuthenticated = true;\n    }));\n  }\n  logout() {\n    this.userIsAuthenticated = false;\n    localStorage.removeItem('token');\n    this.router.navigate(['/']);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,OAAO,QAAQ,MAAM;AAC1C,SAASC,GAAG,QAAQ,gBAAgB;AAIpC,SAASC,wBAAwB,QAAQ,oBAAoB,CAAC,CAAC;;;;AAK/D,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAJnC,WAAM,GAAG,4BAA4B;IAC9C,yBAAoB,GAAG,KAAK;IACpC,eAAU,GAAqB,IAAIN,OAAO,EAAW;IAGnD,MAAMO,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACT,IAAI,CAACG,oBAAoB,GAAG,IAAI;;EAEpC;EAEA,IAAIC,mBAAmB;IACrB,OAAO,IAAI,CAACD,oBAAoB;EAClC;EAEA,IAAIC,mBAAmB,CAACC,KAAc;IACpC,IAAI,CAACF,oBAAoB,GAAGE,KAAK;IACjC,IAAI,CAACC,UAAU,CAACC,IAAI,CAACF,KAAK,CAAC;EAC7B;EAEAG,YAAY,CAACC,IAAU;IACrB,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAe,GAAG,IAAI,CAACC,MAAM,WAAW,EAAEF,IAAI,CAAC,CACjEG,IAAI,CACHjB,wBAAwB,CAAC,IAAI,CAAC,EAC9BD,GAAG,CAAEmB,QAAQ,IAAI;MACfZ,YAAY,CAACa,OAAO,CAAC,OAAO,EAAED,QAAQ,CAACb,KAAK,CAAC;MAC7C,IAAI,CAACI,mBAAmB,GAAG,IAAI;IACjC,CAAC,CAAC,CACH;EACL;EAEAW,SAAS,CAACN,IAAyC;IACjD,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAe,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAEF,IAAI,CAAC,CAC9DG,IAAI,CACHjB,wBAAwB,CAAC,IAAI,CAAC,EAC9BD,GAAG,CAAEmB,QAAQ,IAAI;MACfZ,YAAY,CAACa,OAAO,CAAC,OAAO,EAAED,QAAQ,CAACb,KAAK,CAAC;MAC7C,IAAI,CAACI,mBAAmB,GAAG,IAAI;IACjC,CAAC,CAAC,CACH;EACL;EAEAY,MAAM;IACJ,IAAI,CAACZ,mBAAmB,GAAG,KAAK;IAChCH,YAAY,CAACgB,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAAClB,MAAM,CAACmB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7B;;AA/CWtB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAuB,SAAXvB,WAAW;EAAAwB,YAFV;AAAM","names":["Subject","tap","setAuthTokenAndAuthState","AuthService","constructor","http","router","token","localStorage","getItem","_userIsAuthenticated","userIsAuthenticated","value","authChange","next","registerUser","user","post","apiUrl","pipe","response","setItem","loginUser","logout","removeItem","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\anita\\Desktop\\STUDIA\\APLIKACJE_WEBOWE\\ZALICZENIE-task-manager\\client\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { User } from '../models/user.mode';\nimport { AuthResponse } from '../models/auth.model';\nimport { Router } from '@angular/router';\nimport { setAuthTokenAndAuthState } from '../pipes/auth.pipe'; // Importujemy nasz pipe\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private readonly apiUrl = 'http://localhost:3001/user';\n  private _userIsAuthenticated = false;\n  authChange: Subject<boolean> = new Subject<boolean>();\n\n  constructor(private http: HttpClient, private router: Router) {\n    const token = localStorage.getItem('token');\n    if (token) {\n      this._userIsAuthenticated = true;\n    }\n  }\n\n  get userIsAuthenticated() {\n    return this._userIsAuthenticated;\n  }\n\n  set userIsAuthenticated(value: boolean) {\n    this._userIsAuthenticated = value;\n    this.authChange.next(value);\n  }\n\n  registerUser(user: User): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/register`, user)\n      .pipe(\n        setAuthTokenAndAuthState(this), \n        tap((response) => {\n          localStorage.setItem('token', response.token);\n          this.userIsAuthenticated = true;\n        })\n      );\n  }\n\n  loginUser(user: { email: string, password: string }): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, user)\n      .pipe(\n        setAuthTokenAndAuthState(this),\n        tap((response) => {\n          localStorage.setItem('token', response.token);\n          this.userIsAuthenticated = true;\n        })\n      );\n  }\n\n  logout() {\n    this.userIsAuthenticated = false;\n    localStorage.removeItem('token');\n    this.router.navigate(['/']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}